/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package proyecto;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;

 /* @author julio carrasquilla
 /* @author brayan alvarez maecha
 /* @author jennifer montoya perez
 /* @author daniel tamayo rodrigu


import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.io.File;
import java.io.FileReader;

/**
 * La clase GenerateInfoFiles genera archivos pseudoaleatorios de productos, vendedores y ventas.
 * Al finalizar, muestra un mensaje de finalización exitosa o de error.
 */
public class GenerateInfoFiles {

    // Arreglos de nombres y apellidos para generar información de vendedores
    private static final String[] nombres = {"Juan", "Maria", "Pedro", "Luis", "Ana", "Carolina", "Carlos", "Daniela"};
    private static final String[] apellidos = {"Perez", "Gonzalez", "Rodríguez", "Lopez", "Martinez", "Garcia", "Castro"};

    // Arreglos de productos y precios para generar la lista de productos disponibles
    private static final String[] productos = {"Arroz", "Aceite", "Azucar", "Sal", "Cafe", "Leche", "Pan", "Huevos"};
    private static final double[] precios = {3500, 15000, 5000, 1200, 12000, 4000, 2500, 800};

    /**
     * Método principal que genera los archivos necesarios para la simulación.
     * 
     * @param args Argumentos de la línea de comandos:
     *             args[0] - Número de vendedores (opcional).
     *             args[1] - Número de ventas por vendedor (opcional).
     */
    public static void main(String[] args) {
        int numVendedores = args.length > 0 ? Integer.parseInt(args[0]) : 3;  // Por defecto 3 vendedores
        int numVentas = args.length > 1 ? Integer.parseInt(args[1]) : 5;      // Por defecto 5 ventas por vendedor

        try {
            createDirectories();                    // Crear las carpetas necesarias
            createProductsFile(productos.length);   // Crear archivo de productos
            createSalesManInfoFile(numVendedores);  // Crear archivo de información de vendedores
            createSalesFiles(numVentas);            // Generar archivos de ventas para todos los vendedores
            System.out.println("Archivos generados correctamente.");
        } catch (IOException e) {
            System.out.println("Ocurrió un error al generar los archivos.");
            e.printStackTrace();
        }
    }

    /**
     * Genera un archivo de productos disponibles con sus precios.
     */
    private static void createProductsFile(int productsCount) throws IOException {
        FileWriter writer = new FileWriter("productos/productos.txt");
        for (int i = 0; i < productsCount; i++) {
            writer.write(i + ";" + productos[i] + ";" + precios[i] + ";\n");
        }
        writer.close();
    }

    /**
     * Genera un archivo de información de vendedores con sus nombres y números de cédula.
     */
    private static void createSalesManInfoFile(int salesmanCount) throws IOException {
        FileWriter writer = new FileWriter("vendedores/info_vendedores.txt");
        Random rand = new Random();
        for (int i = 0; i < salesmanCount; i++) {
            String docType = "CC";  // Tipo de documento (Cédula de Ciudadanía)
            long docNumber = 10000000 + rand.nextInt(90000000);  // Número de cédula aleatorio
            String firstName = nombres[rand.nextInt(nombres.length)];
            String lastName = apellidos[rand.nextInt(apellidos.length)];
            writer.write(docType + ";" + docNumber + ";" + firstName + ";" + lastName + "\n");
        }
        writer.close();
    }

    /**
     * Genera archivos de ventas para todos los vendedores listados en "info_vendedores.txt".
     */
    private static void createSalesFiles(int numVentas) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader("vendedores/info_vendedores.txt"));
        String line;
        while ((line = reader.readLine()) != null) {
            String[] vendorInfo = line.split(";");
            long id = Long.parseLong(vendorInfo[1]);
            createSalesMenFile(numVentas, id);  // Generar archivo de ventas para cada vendedor
        }
        reader.close();
    }

    /**
     * Genera un archivo de ventas para un vendedor específico.
     */
    private static void createSalesMenFile(int randomSalesCount, long id) throws IOException {
        FileWriter writer = new FileWriter("ventas/ventas_" + id + ".txt");
        Random rand = new Random();
        writer.write("CC;" + id + "\n");  // Escribir datos del vendedor
        for (int i = 0; i < randomSalesCount; i++) {
            int productId = rand.nextInt(productos.length);  // ID de producto aleatorio
            int quantitySold = rand.nextInt(50) + 1;         // Cantidad vendida aleatoria
            writer.write(productId + ";" + quantitySold + ";\n");
        }
        writer.close();
    }

    /**
     * Crea las carpetas necesarias para almacenar los archivos de productos, vendedores y ventas.
     */
    private static void createDirectories() throws IOException {
        File productosDir = new File("productos");
        File vendedoresDir = new File("vendedores");
        File ventasDir = new File("ventas");

        if (!productosDir.exists()) productosDir.mkdirs();
        if (!vendedoresDir.exists()) vendedoresDir.mkdirs();
        if (!ventasDir.exists()) ventasDir.mkdirs();
    }
}
